<launch>

	<!-- these are the arguments you can pass this launch file, for example paused:=true -->
	<arg name="paused" default="true"/>
	<arg name="use_sim_time" default="true"/>
	<arg name="extra_gazebo_args" default=""/>
	<arg name="gui" default="true"/>
	<arg name="debug" default="false"/>
	<arg name="physics" default="ode"/>
	<arg name="verbose" default="true"/>
	<arg name="world" default="gazebo_ros_range"/>

	<!-- set use_sim_time flag -->
	<group if="$(arg use_sim_time)">
		<param name="/use_sim_time" value="true" />
	</group>

	<!-- Start the gazebo world -->
	<include file="$(find gazebo_ros)/launch/empty_world.launch">
		<arg name="world_name" value="$(find elir_gazebo)/worlds/elir.world"/>
		<arg name="gui" value="true"/>
		<arg name="paused" value="true"/>
		<arg name="verbose" default="false"/>
	</include>

	  <!-- Spawn Cable --> 
  	<node name="urdf_spawner_tower" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"  args="-sdf -model suspension_tower -x 0.0 -y -0.018 -z 1.0 -file $(find elir_gazebo)/models/power_line/model.sdf"/> 
 
  	<!-- Spawn one obstacle --> 
  	<node name="urdf_obs_tower" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"  args="-sdf -model obs_tower -x -1.5 -y -0.065 -z 0.98 -file $(find elir_gazebo)/models/obstacle_1/model.sdf"/> 
 
  	<!-- Spawn another obstacle --> 
  	<node name="urdf_obs_2_tower" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"  args="-sdf -model obs_2_tower -x 2.0 -y -0.05 -z 0.88 -file $(find elir_gazebo)/models/obstacle_2/model.sdf"/> 

	<!-- urdf xml robot description loaded on the Parameter Server, converting the xacro into a proper urdf file-->
	<param name="robot_description" command="$(find xacro)/xacro '$(find elir_description)/urdf/elir.urdf.xacro' --inorder " />
	<!-- Spawn Elir Robot -->
	<node name="elir_spawn" pkg="gazebo_ros" type="spawn_model" output="screen" args="-urdf -param robot_description -x 0.0 -y -0.01 -z 0.40 -model elir" />
	<!-- Call launch to allow joint control -->
	<include file="$(find elir_control)/launch/elir_trajectory_control.launch" />
	<!-- Spawn joint controllers -->
	<!-- <rosparam file="$(find elir_control)/config/elir_trajectory_control.yaml" command="load"/>
	<node name="joint_controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
            output="screen" ns="/robot" args="joint_state_controller" /> -->
	<!-- Joint state Publisher -->
	<!-- <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
        <param name="/use_gui" value="false"/>
        <rosparam param="/source_list">[/robot/joint_states]</rosparam>
    </node> -->
	<!-- convert joint states to TF transforms for rviz, etc -->
    <!-- <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
        respawn="false" output="screen">
    </node>   -->

</launch>
